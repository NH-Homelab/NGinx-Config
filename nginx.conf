worker_processes 1;

events {
  worker_connections 1024;
}

http {
    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }
    
    client_max_body_size 20m;

    include mime.types;
    default_type application/octet-stream;

    sendfile on;
    keepalive_disable none;

    #Setup for google oauth server
    upstream oauth_server {
        server controller.local:8000;
    }

    server {
        listen 443 ssl;
        server_name www.nicholashenley.com nicholashenley.com;

        ssl_certificate /etc/nginx/certs/nginx.crt;
        ssl_certificate_key /etc/nginx/certs/nginx.key;

        root /var/www/html;
        index index.html;

        location / {
            try_files $uri $uri/ =404;
        }
    }

    ## The Dashboard -- A basic interface to configure the system.
    server {
        listen 443 ssl;
        server_name dash.nicholashenley.com;

        ssl_certificate /etc/nginx/certs/nginx.crt;
        ssl_certificate_key /etc/nginx/certs/nginx.key;

        #Redirect to /dashboard
        location = / {
            return 301 https://www.nicholashenley.com/dashboard;
        }

        #dashboard
        location /dashboard {
            set $Original_Host $host;
            set $Original_Path $request_uri;

            auth_request /auth/verify;
            proxy_intercept_errors on;
            error_page 401 = /auth/google;

            proxy_pass http://dashboard.local:3000;
            proxy_set_header Host $host;

            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /api {
            set $Original_Host $host;
            set $Original_Path $request_uri;

            auth_request /auth/verify;
            proxy_intercept_errors on;
            error_page 401 = /auth/google;

            proxy_pass http://controller.local:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location = /auth/verify {
            internal;
            proxy_set_header Host auth.nicholashenley.com;

            proxy_set_header X-Original-Host $Original_Host;
            proxy_set_header X-Original-Path $Original_Path;

            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header X-Original-URI $request_uri;

            proxy_pass http://controller.local:8000;
        }

        location = /auth/google {
            internal;
            proxy_pass http://controller.local:8000;

            proxy_set_header X-Original-Host $Original_Host;
            proxy_set_header X-Original-Path $Original_Path;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    ## Authorization server -- Checks if a user is authorized with google
    server {
        listen 443 ssl;
        server_name auth.nicholashenley.com;

        ssl_certificate /etc/nginx/certs/nginx.crt;
        ssl_certificate_key /etc/nginx/certs/nginx.key;

        #Needed for google auth
        resolver 8.8.8.8;
        proxy_pass_request_headers on;

        location /auth/verify {
            proxy_pass http://controller.local:8000;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /auth/google {
            proxy_pass http://controller.local:8000;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /auth/google/callback {
            proxy_pass http://controller.local:8000;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # Include configurations from directory
    include /etc/nginx/conf.d/*.conf;
}
